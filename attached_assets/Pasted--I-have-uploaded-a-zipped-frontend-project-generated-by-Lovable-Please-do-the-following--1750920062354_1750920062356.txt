📦 I have uploaded a zipped frontend project generated by Lovable. Please do the following:

=============================
🔍 STEP 1: Analyze the Frontend
=============================

1. Unzip the uploaded project into a `frontend/` folder.
2. Analyze the code structure inside:
   - Pages like: Home, Login, Signup, Dashboard, Workshop Listing, Workshop Detail, Contact, About, etc.
   - Components and layout
   - Buttons, forms, and input fields
3. DO NOT change the design or styling from Lovable.
4. Understand which frontend components need backend support (like form submissions, data display, profile update, etc.)

=============================
🧠 STEP 2: Plan Functionality
=============================

From the analysis, determine all necessary backend features:
- Auth (Login, Signup) for:
  - Normal users
  - Enterprise users
  - Admins
- Workshop-related features:
  - Create/Edit/Delete workshop (by enterprise)
  - Approve/Reject workshop (by admin)
  - Register for workshop (by users)
  - Manual or automated registration logic
- View "My Workshops" (user and enterprise)
- Admin dashboard with user/workshop/enterprise management

=============================
🔧 STEP 3: Create the Backend
=============================

Build a backend in a separate `backend/` folder using **Express.js** and **PostgreSQL**:

1. Set up REST API routes:
   - `/api/auth`: signup, login
   - `/api/users`: profile, edit, delete
   - `/api/workshops`: CRUD, filters, approve/reject
   - `/api/registrations`: register, confirm, cancel
   - `/api/enterprises`: list, create, update
2. Implement JWT authentication with role-based access (user, enterprise, admin)
3. Add middleware for auth/authorization
4. Use proper folder structure: `routes/`, `controllers/`, `models/`

=============================
🗄️ STEP 4: Create the Database
=============================

Use PostgreSQL (via Prisma or Sequelize) with this schema:

- `users`: id, name, email, password, role (user/admin/enterprise)
- `workshops`: id, title, description, type, mode, price, seats, date, location, status, enterprise_id
- `registrations`: id, user_id, workshop_id, registration_mode, status, screenshot_url (optional)
- `enterprises`: id, name, email, password, description

=============================
🔗 STEP 5: Connect Backend with Frontend
=============================

1. Connect the analyzed frontend forms and pages to the new backend:
   - Registration forms → backend API
   - Login forms → token auth
   - Dashboard → fetch dynamic data
   - Workshop listing → dynamic load
   - Contact or Map section → use placeholders if no logic is needed
2. Maintain full visual fidelity of the Lovable-generated UI.
3. Show toast messages for success/errors in forms.

=============================
🚀 FINAL GOAL
=============================

- Use the existing Lovable UI from the uploaded ZIP.
- Do not modify the design; just connect it with backend logic.
- Deploy:
  - Frontend → Vercel
  - Backend → Render or Railway
- Use `.env` for secrets and base URLs

Start by unzipping the frontend, analyzing it thoroughly, and then build the backend and database from scratch based on actual UI elements and features.
